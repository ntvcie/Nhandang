import streamlit as st
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
from PIL import Image
import google.generativeai as genai
import time
import os
import tempfile
from PIL import ImageGrab
from google.cloud import texttospeech
from google.cloud import speech
from pydub.playback import play
import os
import string


# ƒê·∫£m b·∫£o bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
#os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "gen-lang-client-0382763815-044c7b8f5c68.json"
hide_st_style = """
     <style>
            .block-container {
                padding-top: 0rem;  /* Gi·∫£m kho·∫£ng c√°ch ph√≠a tr√™n */
                padding-left: 1rem;
            }
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
     </style>
"""
st.set_page_config(
    page_title="AI tr·ª£ gi√∫p",
    layout="wide",
    page_icon="‚úÖ",
    initial_sidebar_state="expanded",
)

st.markdown(hide_st_style, unsafe_allow_html=True)
#API key deepseek: sk-997966a4069f4981a0091de5d3fdc79a
# API keys
#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

api_key = os.getenv("GOOGLE_API_KEY")
def stream_output(text):
    for char in text:
        yield char
        time.sleep(0.01)  # Simulate delay

import pytesseract
def generate_image_caption(uploaded_file):
    if uploaded_file is not None:
        # M·ªü t·ªáp d∆∞·ªõi d·∫°ng h√¨nh ·∫£nh
        image = Image.open(uploaded_file)

        # T·∫°o prompt m·∫∑c ƒë·ªãnh cho m√¥ h√¨nh
        prompt = """
        Tr∆∞·ªùng h·ª£p 1: H√¨nh ·∫£nh c√≥ n·ªôi dung v·ªÅ ƒê·ªì th·ªã h√†m l∆∞·ª£ng kh√≠ CO:
        N·∫øu n·ªìng ƒë·ªô CO tƒÉng d·∫ßn theo th·ªùi gian, ƒëi·ªÅu ƒë√≥ cho th·∫•y qu√° tr√¨nh ch√°y ƒëang di·ªÖn ra. 
        N·∫øu CO tƒÉng li√™n t·ª•c v√† v·ªõi t·ªëc ƒë·ªô nhanh, qu√° tr√¨nh ch√°y ƒëang di·ªÖn ra m·∫°nh m·∫Ω. 
        ƒê√¢y l√† d·∫•u hi·ªáu ƒë·∫∑c tr∆∞ng c·ªßa hi·ªán t∆∞·ª£ng than t·ª± ch√°y.
        Ng∆∞·ª£c l·∫°i, n·∫øu n·ªìng ƒë·ªô CO ch·ªâ tƒÉng trong v√†i ph√∫t r·ªìi gi·∫£m, ƒë√≥ kh√¥ng ph·∫£i l√† than t·ª± ch√°y m√† l√† hi·ªán t∆∞·ª£ng ph√°t sinh do ho·∫°t ƒë·ªông n·ªï m√¨n trong khai th√°c than h·∫ßm l√≤.
        T·ª´ ƒë√≥ h√£y nh·∫≠n x√©t xem H√¨nh n√†y c√≥ hi·ªán t∆∞·ª£ng than t·ª± ch√°y kh√¥ng?
        N·∫øu kh√¥ng ph·∫£i th√¨ ngo√†i vi·ªác ph√¢n t√≠ch, gi·∫£i th√≠ch th·∫≠t chi ti·∫øt h√£y k·∫øt lu·∫≠n l√†: M·∫∑c d√π trong th·ªùi ƒëi·ªÉm quan s√°t ch∆∞a c√≥ d·∫•u hi·ªáu c·ªßa hi·ªán t∆∞·ª£ng than t·ª± ch√°y ho·∫∑c m·ª©c ƒë·ªô √¥xy h√≥a than th·∫•p, tuy nhi√™n v·∫´n c·∫ßn ti·∫øp t·ª•c theo d√µi h√†m l∆∞·ª£ng kh√≠ CO ƒë·ªÉ quan tr·∫Øc than t·ª± ch√°y t·∫°i khu v·ª±c n√†y.
        ==============================================================================================================================================================================================================================================================================================
        Tr∆∞·ªùng h·ª£p 2: H√¨nh ·∫£nh c√≥ n·ªôi dung v·ªÅ ƒê·ªì th·ªã nhi·ªát ƒë·ªô:
        N·∫øu nhi·ªát ƒë·ªô tƒÉng d·∫ßn theo th·ªùi gian, ƒëi·ªÅu ƒë√≥ cho th·∫•y qu√° tr√¨nh √¥xy h√≥a than ƒëang di·ªÖn ra t·ª´ t·ª´. 
        N·∫øu nhi·ªát ƒë·ªô tƒÉng li√™n t·ª•c v√† v·ªõi t·ªëc ƒë·ªô nhanh, qu√° tr√¨nh √¥xy h√≥a than ƒëang di·ªÖn ra m·∫°nh m·∫Ω. 
        ƒê√¢y l√† d·∫•u hi·ªáu ƒë·∫∑c tr∆∞ng c·ªßa hi·ªán t∆∞·ª£ng than t·ª± ch√°y (c√≤n g·ªçi l√† ch√°y n·ªôi sinh trong than).
        Ng∆∞·ª£c l·∫°i, n·∫øu nhi·ªát ƒë·ªô ch·ªâ tƒÉng trong v√†i ph√∫t r·ªìi gi·∫£m, ho·∫∑c kh√¥ng c√≥ xu h∆∞·ªõng tƒÉng r√µ r·ªát th√¨ ƒë√≥ kh√¥ng ph·∫£i l√† than t·ª± ch√°y.
        T·ª´ ƒë√≥ h√£y nh·∫≠n x√©t xem H√¨nh n√†y c√≥ hi·ªán t∆∞·ª£ng than t·ª± ch√°y kh√¥ng?
        N·∫øu kh√¥ng ph·∫£i th√¨ ngo√†i vi·ªác ph√¢n t√≠ch, gi·∫£i th√≠ch th·∫≠t chi ti·∫øt h√£y k·∫øt lu·∫≠n l√†: M·∫∑c d√π trong th·ªùi ƒëi·ªÉm quan s√°t ch∆∞a c√≥ d·∫•u hi·ªáu c·ªßa hi·ªán t∆∞·ª£ng than t·ª± ch√°y ho·∫∑c m·ª©c ƒë·ªô √¥xy h√≥a than th·∫•p, tuy nhi√™n v·∫´n c·∫ßn ti·∫øp t·ª•c theo d√µi nhi·ªát ƒë·ªô ƒë·ªÉ quan tr·∫Øc than t·ª± ch√°y t·∫°i khu v·ª±c n√†y. 
        """

        # C·∫•u h√¨nh m√¥ h√¨nh
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel("gemini-2.0-flash-exp")

        # G·ª≠i y√™u c·∫ßu t·∫°o caption
        response = model.generate_content([prompt, image])
        return response.text
    else:
        return "Vui l√≤ng t·∫£i l√™n m·ªôt h√¨nh ·∫£nh h·ª£p l·ªá!"

import base64
def main():
    st.markdown("<h3 style='font-size: 18px; color: #1E90FF;'>üåÑ ·ª®ng d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch, ph√°t hi·ªán c·∫£nh b√°o hi·ªán t∆∞·ª£ng than t·ª± ch√°y.</h3>", unsafe_allow_html=True)

    if st.button("X·ª≠ l√Ω"):
        image = ImageGrab.grabclipboard()  # L·∫•y ·∫£nh t·ª´ clipboard

        if image is not None:
            # T·∫°o hai c·ªôt: c·ªôt 1 hi·ªÉn th·ªã h√¨nh ·∫£nh, c·ªôt 2 hi·ªÉn th·ªã tr·∫£ l·ªùi c·ªßa AI
            col1, col2 = st.columns([1, 1])  # T·ª∑ l·ªá chi·ªÅu r·ªông c·ªôt: 1 ph·∫ßn cho h√¨nh ·∫£nh, 2 ph·∫ßn cho tr·∫£ l·ªùi
            with col1:
                st.image(image, caption='·∫¢nh ƒë·ªì th·ªã', use_container_width=True)

            with col2:
                with st.spinner(text="ƒêang x·ª≠ l√≠..."):
                    st.snow()
                    # L∆∞u ·∫£nh v√†o file t·∫°m ƒë·ªÉ truy·ªÅn v√†o h√†m
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmpfile:
                        image.save(tmpfile.name, format="PNG")
                        tmpfile_path = tmpfile.name

                    # G·ªçi AI ƒë·ªÉ ph√¢n t√≠ch
                    caption = generate_image_caption(tmpfile_path)
                    st.write_stream(stream_output("Tr·∫£ l·ªùi: " + caption))
                    st.balloons()
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh trong clipboard! H√£y sao ch√©p ·∫£nh tr∆∞·ªõc khi d√°n.")
if __name__ == "__main__":
    main()
